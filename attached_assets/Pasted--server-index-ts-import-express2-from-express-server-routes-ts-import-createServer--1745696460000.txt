// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
var MemStorage = class {
  users;
  categories;
  services;
  paymentMethods;
  testimonials;
  contactInfo;
  orders;
  currentUserId;
  currentCategoryId;
  currentServiceId;
  currentPaymentMethodId;
  currentTestimonialId;
  currentContactInfoId;
  currentOrderId;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.categories = /* @__PURE__ */ new Map();
    this.services = /* @__PURE__ */ new Map();
    this.paymentMethods = /* @__PURE__ */ new Map();
    this.testimonials = /* @__PURE__ */ new Map();
    this.contactInfo = /* @__PURE__ */ new Map();
    this.orders = /* @__PURE__ */ new Map();
    this.currentUserId = 1;
    this.currentCategoryId = 1;
    this.currentServiceId = 1;
    this.currentPaymentMethodId = 1;
    this.currentTestimonialId = 1;
    this.currentContactInfoId = 1;
    this.currentOrderId = 1;
    this.initializeSeedData();
  }
  // User methods
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByUsername(username) {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }
  async createUser(insertUser) {
    const id = this.currentUserId++;
    const user = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  // Category methods
  async getCategories() {
    return Array.from(this.categories.values());
  }
  async getCategoryBySlug(slug) {
    return Array.from(this.categories.values()).find(
      (category) => category.slug === slug
    );
  }
  async getCategoryById(id) {
    return this.categories.get(id);
  }
  async createCategory(category) {
    const id = this.currentCategoryId++;
    const newCategory = { ...category, id };
    this.categories.set(id, newCategory);
    return newCategory;
  }
  async updateCategory(id, categoryUpdate) {
    const category = this.categories.get(id);
    if (!category) return void 0;
    const updatedCategory = { ...category, ...categoryUpdate };
    this.categories.set(id, updatedCategory);
    return updatedCategory;
  }
  async deleteCategory(id) {
    return this.categories.delete(id);
  }
  // Service methods
  async getServices() {
    return Array.from(this.services.values());
  }
  async getServicesByCategory(categoryId) {
    return Array.from(this.services.values()).filter(
      (service) => service.categoryId === categoryId
    );
  }
  async getServiceById(id) {
    return this.services.get(id);
  }
  async getFeaturedServices() {
    return Array.from(this.services.values()).filter(
      (service) => service.featured
    );
  }
  async createService(service) {
    const id = this.currentServiceId++;
    const newService = { ...service, id };
    this.services.set(id, newService);
    return newService;
  }
  async updateService(id, serviceUpdate) {
    const service = this.services.get(id);
    if (!service) return void 0;
    const updatedService = { ...service, ...serviceUpdate };
    this.services.set(id, updatedService);
    return updatedService;
  }
  async deleteService(id) {
    return this.services.delete(id);
  }
  // Payment methods
  async getPaymentMethods() {
    return Array.from(this.paymentMethods.values());
  }
  async getPaymentMethodById(id) {
    return this.paymentMethods.get(id);
  }
  async createPaymentMethod(method) {
    const id = this.currentPaymentMethodId++;
    const newMethod = { ...method, id };
    this.paymentMethods.set(id, newMethod);
    return newMethod;
  }
  async updatePaymentMethod(id, methodUpdate) {
    const method = this.paymentMethods.get(id);
    if (!method) return void 0;
    const updatedMethod = { ...method, ...methodUpdate };
    this.paymentMethods.set(id, updatedMethod);
    return updatedMethod;
  }
  async deletePaymentMethod(id) {
    return this.paymentMethods.delete(id);
  }
  // Order methods
  async getOrders() {
    return Array.from(this.orders.values());
  }
  async getOrderById(id) {
    return this.orders.get(id);
  }
  async createOrder(order) {
    const id = this.currentOrderId++;
    const newOrder = {
      ...order,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.orders.set(id, newOrder);
    return newOrder;
  }
  async updateOrderStatus(id, status) {
    const order = this.orders.get(id);
    if (!order) return void 0;
    const updatedOrder = { ...order, status };
    this.orders.set(id, updatedOrder);
    return updatedOrder;
  }
  // Testimonials
  async getTestimonials() {
    return Array.from(this.testimonials.values());
  }
  async getTestimonialById(id) {
    return this.testimonials.get(id);
  }
  async createTestimonial(testimonial) {
    const id = this.currentTestimonialId++;
    const newTestimonial = { ...testimonial, id };
    this.testimonials.set(id, newTestimonial);
    return newTestimonial;
  }
  async updateTestimonial(id, testimonialUpdate) {
    const testimonial = this.testimonials.get(id);
    if (!testimonial) return void 0;
    const updatedTestimonial = { ...testimonial, ...testimonialUpdate };
    this.testimonials.set(id, updatedTestimonial);
    return updatedTestimonial;
  }
  async deleteTestimonial(id) {
    return this.testimonials.delete(id);
  }
  // Contact Information methods
  async getContactInfo() {
    const contacts = Array.from(this.contactInfo.values());
    return contacts.length > 0 ? contacts[0] : void 0;
  }
  async createContactInfo(info) {
    const id = this.currentContactInfoId++;
    const newContactInfo = { ...info, id };
    this.contactInfo.set(id, newContactInfo);
    return newContactInfo;
  }
  async updateContactInfo(id, infoUpdate) {
    const contactInfo2 = this.contactInfo.get(id);
    if (!contactInfo2) return void 0;
    const updatedContactInfo = { ...contactInfo2, ...infoUpdate };
    this.contactInfo.set(id, updatedContactInfo);
    return updatedContactInfo;
  }
  // Seed data
  initializeSeedData() {
    this.createContactInfo({
      address: "Bole, Addis Ababa, Ethiopia",
      phone: "+251 91 234 5678",
      telegramLink: "https://t.me/Miker_mike",
      telegramUsername: "@Miker_mike on Telegram",
      facebookLink: "",
      instagramLink: "",
      twitterLink: "",
      showSocialIcons: false,
      weekdayHours: "Monday - Saturday: 9:00 AM - 8:00 PM",
      weekendHours: "Sunday: 10:00 AM - 6:00 PM",
      timeZone: "East Africa Time (EAT)"
    });
    this.createUser({
      username: "admin",
      password: "admin123",
      isAdmin: true
    });
    const categoriesData = [
      {
        name: "TikTok",
        slug: "tiktok",
        icon: "hashtag",
        description: "TikTok followers, likes, views and more"
      },
      {
        name: "YouTube",
        slug: "youtube",
        icon: "play",
        description: "YouTube subscribers, views, and engagement services"
      },
      {
        name: "Instagram",
        slug: "instagram",
        icon: "hashtag",
        description: "Instagram followers, likes and engagement services"
      },
      {
        name: "Facebook",
        slug: "facebook",
        icon: "users",
        description: "Facebook page likes, followers and engagement"
      },
      {
        name: "Twitter/X",
        slug: "twitter",
        icon: "hashtag",
        description: "Twitter followers, retweets, and engagement"
      },
      {
        name: "Subscription Services",
        slug: "subscription",
        icon: "calendar-check",
        description: "Premium subscriptions for streaming platforms"
      },
      {
        name: "Gift Cards",
        slug: "giftcards",
        icon: "gift",
        description: "Digital gift cards for various platforms"
      }
    ];
    categoriesData.forEach((category) => {
      this.createCategory(category);
    });
    const paymentMethodsData = [
      {
        name: "Telebirr",
        icon: "mobile-alt",
        description: "Pay using Telebirr mobile money",
        instructions: '1. Open Telebirr app\n2. Select "Pay" option\n3. Enter our merchant ID: 123456\n4. Enter the amount\n5. Complete the payment\n6. Take a screenshot of the confirmation'
      },
      {
        name: "Bank Transfer",
        icon: "university",
        description: "Direct bank transfer to our account",
        instructions: "1. Transfer the amount to our bank account:\n   - Bank: Commercial Bank of Ethiopia\n   - Account Name: Miker Market\n   - Account Number: 1000123456789\n2. Take a screenshot of the transfer confirmation"
      },
      {
        name: "Amole",
        icon: "credit-card",
        description: "Pay via Amole digital wallet",
        instructions: '1. Open Amole app\n2. Select "Pay Merchant"\n3. Enter merchant code: MIKER2023\n4. Enter the amount\n5. Complete the payment\n6. Take a screenshot of the confirmation'
      }
    ];
    paymentMethodsData.forEach((method) => {
      this.createPaymentMethod(method);
    });
    const servicesData = [
      // TikTok Services (Category 1)
      {
        name: "TikTok Followers (1000)",
        description: "Get 1000 high-quality TikTok followers.",
        price: 450,
        image: "https://images.unsplash.com/photo-1596495577886-d920f1fb7238?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 1,
        featured: true,
        paymentInstructions: "After payment, send your TikTok username and payment screenshot to our WhatsApp."
      },
      {
        name: "TikTok Views (5000)",
        description: "Increase your TikTok video views by 5000.",
        price: 200,
        image: "https://images.unsplash.com/photo-1611605698323-b1e99cfd37ea?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 1,
        featured: true,
        paymentInstructions: "After payment, send your TikTok video link and payment screenshot to our WhatsApp."
      },
      {
        name: "TikTok Likes (1000)",
        description: "Add 1000 real likes to your TikTok video.",
        price: 150,
        image: "https://images.unsplash.com/photo-1611605698323-b1e99cfd37ea?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 1,
        featured: false,
        paymentInstructions: "After payment, send your TikTok video link and payment screenshot to our WhatsApp."
      },
      // YouTube Services (Category 2)
      {
        name: "YouTube Subscribers (500)",
        description: "Gain 500 new YouTube subscribers for your channel.",
        price: 800,
        image: "https://images.unsplash.com/photo-1611162616305-c69b3fa7fbe0?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 2,
        featured: true,
        paymentInstructions: "After payment, send your YouTube channel link and payment screenshot to our WhatsApp."
      },
      {
        name: "YouTube Views (5000)",
        description: "Add 5000 views to your YouTube video.",
        price: 350,
        image: "https://images.unsplash.com/photo-1611162616305-c69b3fa7fbe0?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 2,
        featured: true,
        paymentInstructions: "After payment, send your YouTube video link and payment screenshot to our WhatsApp."
      },
      {
        name: "YouTube Comments (50)",
        description: "50 positive comments on your YouTube video.",
        price: 300,
        image: "https://images.unsplash.com/photo-1611162616305-c69b3fa7fbe0?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 2,
        featured: false,
        paymentInstructions: "After payment, send your YouTube video link and payment screenshot to our WhatsApp."
      },
      // Instagram Services (Category 3)
      {
        name: "Instagram Followers (1000)",
        description: "Get 1000 high-quality Instagram followers.",
        price: 500,
        image: "https://images.unsplash.com/photo-1611162617213-7d7a39e9b1d7?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 3,
        featured: true,
        paymentInstructions: "After payment, send your Instagram username and payment screenshot to our WhatsApp."
      },
      {
        name: "Instagram Likes (1000)",
        description: "Add 1000 likes to your Instagram post.",
        price: 250,
        image: "https://images.unsplash.com/photo-1611162618071-b39a2ec055fb?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 3,
        featured: false,
        paymentInstructions: "After payment, send your Instagram post link and payment screenshot to our WhatsApp."
      },
      {
        name: "Instagram Comments (50)",
        description: "50 positive comments on your Instagram post.",
        price: 300,
        image: "https://images.unsplash.com/photo-1611162618071-b39a2ec055fb?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 3,
        featured: false,
        paymentInstructions: "After payment, send your Instagram post link and payment screenshot to our WhatsApp."
      },
      // Facebook Services (Category 4)
      {
        name: "Facebook Page Likes (500)",
        description: "Boost your Facebook page with 500 real likes.",
        price: 300,
        image: "https://images.unsplash.com/photo-1563986768494-4dee2763ff3f?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 4,
        featured: true,
        paymentInstructions: "After payment, send your Facebook page link and payment screenshot to our WhatsApp."
      },
      {
        name: "Facebook Post Likes (300)",
        description: "Get 300 likes on your Facebook post.",
        price: 200,
        image: "https://images.unsplash.com/photo-1579869847514-7c1a19d2d2ad?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 4,
        featured: false,
        paymentInstructions: "After payment, send your Facebook post link and payment screenshot to our WhatsApp."
      },
      {
        name: "Facebook Group Members (300)",
        description: "Add 300 members to your Facebook group.",
        price: 400,
        image: "https://images.unsplash.com/photo-1579869847514-7c1a19d2d2ad?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 4,
        featured: false,
        paymentInstructions: "After payment, send your Facebook group link and payment screenshot to our WhatsApp."
      },
      // Twitter Services (Category 5)
      {
        name: "Twitter Followers (500)",
        description: "Get 500 Twitter followers for your account.",
        price: 400,
        image: "https://images.unsplash.com/photo-1611605698323-b1e99cfd37ea?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 5,
        featured: true,
        paymentInstructions: "After payment, send your Twitter username and payment screenshot to our WhatsApp."
      },
      {
        name: "Twitter Retweets (100)",
        description: "Get 100 retweets for your tweet.",
        price: 200,
        image: "https://images.unsplash.com/photo-1611605698323-b1e99cfd37ea?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 5,
        featured: false,
        paymentInstructions: "After payment, send your tweet link and payment screenshot to our WhatsApp."
      },
      {
        name: "Twitter Likes (200)",
        description: "Get 200 likes on your tweet.",
        price: 180,
        image: "https://images.unsplash.com/photo-1611605698323-b1e99cfd37ea?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 5,
        featured: false,
        paymentInstructions: "After payment, send your tweet link and payment screenshot to our WhatsApp."
      },
      // Subscription Services (Category 6)
      {
        name: "Netflix Premium (1 Month)",
        description: "Access to all Netflix content in 4K with 4 screens.",
        price: 450,
        image: "https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 6,
        featured: true,
        paymentInstructions: "After payment, send your email address for account setup and payment screenshot to our WhatsApp."
      },
      {
        name: "Spotify Premium (1 Month)",
        description: "Ad-free music streaming with offline downloads.",
        price: 250,
        image: "https://images.unsplash.com/photo-1614680376573-df3480f0c6ff?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 6,
        featured: false,
        paymentInstructions: "After payment, send your email address for account setup and payment screenshot to our WhatsApp."
      },
      {
        name: "Disney+ (1 Month)",
        description: "Full access to Disney+ streaming service.",
        price: 350,
        image: "https://images.unsplash.com/photo-1604877701092-4ca8d3eb9d6a?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 6,
        featured: false,
        paymentInstructions: "After payment, send your email address for account setup and payment screenshot to our WhatsApp."
      },
      // Gift Cards (Category 7)
      {
        name: "Amazon Gift Card ($25)",
        description: "$25 Amazon Gift Card code.",
        price: 950,
        image: "https://images.unsplash.com/photo-1606041011872-596597976b25?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 7,
        featured: true,
        paymentInstructions: "After payment, the gift card code will be sent to you via email or WhatsApp."
      },
      {
        name: "Google Play Gift Card ($10)",
        description: "$10 Google Play Gift Card code.",
        price: 400,
        image: "https://images.unsplash.com/photo-1607988795691-3d0147b43231?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 7,
        featured: false,
        paymentInstructions: "After payment, the gift card code will be sent to you via email or WhatsApp."
      },
      {
        name: "iTunes Gift Card ($15)",
        description: "$15 iTunes Gift Card code.",
        price: 600,
        image: "https://images.unsplash.com/photo-1524072704778-db99d0e434f4?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
        categoryId: 7,
        featured: true,
        paymentInstructions: "After payment, the gift card code will be sent to you via email or WhatsApp."
      }
    ];
    servicesData.forEach((service) => {
      this.createService(service);
    });
    const testimonialsData = [
      {
        name: "Sara Abebe",
        image: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80",
        rating: 5,
        comment: "The subscription services work flawlessly. I've been using Netflix through them for months with no issues."
      },
      {
        name: "Dawit Haile",
        image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80",
        rating: 4,
        comment: "I purchased game top-ups for PUBG and received the UC within minutes. Great service and reliable!"
      },
      {
        name: "Hirut Tadesse",
        image: "https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80",
        rating: 5,
        comment: "Their SMM services helped me grow my small business Instagram account. The followers are real and engaged!"
      }
    ];
    testimonialsData.forEach((testimonial) => {
      this.createTestimonial(testimonial);
    });
  }
};
var storage = new MemStorage();

// server/routes.ts
import { z } from "zod";

// shared/schema.ts
import { pgTable, text, serial, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var categories = pgTable("categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  icon: text("icon").notNull(),
  description: text("description")
});
var insertCategorySchema = createInsertSchema(categories).pick({
  name: true,
  slug: true,
  icon: true,
  description: true
});
var services = pgTable("services", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  price: integer("price").notNull(),
  // Price in ETB
  image: text("image"),
  categoryId: integer("category_id").notNull(),
  featured: boolean("featured").default(false),
  paymentInstructions: text("payment_instructions")
});
var insertServiceSchema = createInsertSchema(services).pick({
  name: true,
  description: true,
  price: true,
  image: true,
  categoryId: true,
  featured: true,
  paymentInstructions: true
});
var paymentMethods = pgTable("payment_methods", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  icon: text("icon").notNull(),
  description: text("description"),
  instructions: text("instructions")
});
var insertPaymentMethodSchema = createInsertSchema(paymentMethods).pick({
  name: true,
  icon: true,
  description: true,
  instructions: true
});
var orders = pgTable("orders", {
  id: serial("id").primaryKey(),
  serviceId: integer("service_id").notNull(),
  serviceName: text("service_name").notNull(),
  paymentMethodId: integer("payment_method_id").notNull(),
  paymentMethod: text("payment_method").notNull(),
  amount: integer("amount").notNull(),
  status: text("status").notNull().default("pending"),
  screenshotUrl: text("screenshot_url").notNull(),
  customerPhone: text("customer_phone").notNull(),
  customerTelegram: text("customer_telegram"),
  platformUsername: text("platform_username"),
  targetUrl: text("target_url"),
  createdAt: timestamp("created_at").defaultNow().notNull()
});
var insertOrderSchema = createInsertSchema(orders).pick({
  serviceId: true,
  serviceName: true,
  paymentMethodId: true,
  paymentMethod: true,
  amount: true,
  status: true,
  screenshotUrl: true,
  customerPhone: true,
  customerTelegram: true,
  platformUsername: true,
  targetUrl: true
});
var testimonials = pgTable("testimonials", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  image: text("image"),
  rating: integer("rating").notNull(),
  comment: text("comment").notNull()
});
var insertTestimonialSchema = createInsertSchema(testimonials).pick({
  name: true,
  image: true,
  rating: true,
  comment: true
});
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  isAdmin: boolean("is_admin").default(false)
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
  isAdmin: true
});
var contactInfo = pgTable("contact_info", {
  id: serial("id").primaryKey(),
  address: text("address").notNull(),
  phone: text("phone").notNull(),
  telegramLink: text("telegram_link").notNull(),
  telegramUsername: text("telegram_username").notNull(),
  facebookLink: text("facebook_link").default("").notNull(),
  instagramLink: text("instagram_link").default("").notNull(),
  twitterLink: text("twitter_link").default("").notNull(),
  showSocialIcons: boolean("show_social_icons").default(false).notNull(),
  // Business hours fields
  weekdayHours: text("weekday_hours").default("Monday - Saturday: 9:00 AM - 8:00 PM").notNull(),
  weekendHours: text("weekend_hours").default("Sunday: 10:00 AM - 6:00 PM").notNull(),
  timeZone: text("time_zone").default("East Africa Time (EAT)").notNull()
});
var insertContactInfoSchema = createInsertSchema(contactInfo).pick({
  address: true,
  phone: true,
  telegramLink: true,
  telegramUsername: true,
  facebookLink: true,
  instagramLink: true,
  twitterLink: true,
  showSocialIcons: true,
  weekdayHours: true,
  weekendHours: true,
  timeZone: true
});

// server/routes.ts
async function registerRoutes(app2) {
  app2.get("/api/categories", async (req, res) => {
    const categories2 = await storage.getCategories();
    res.json(categories2);
  });
  app2.get("/api/categories/:slug", async (req, res) => {
    const { slug } = req.params;
    const category = await storage.getCategoryBySlug(slug);
    if (!category) {
      return res.status(404).json({ message: "Category not found" });
    }
    res.json(category);
  });
  app2.get("/api/services", async (req, res) => {
    const services2 = await storage.getServices();
    res.json(services2);
  });
  app2.get("/api/services/featured", async (req, res) => {
    const services2 = await storage.getFeaturedServices();
    res.json(services2);
  });
  app2.get("/api/services/category/:categoryId", async (req, res) => {
    const categoryId = parseInt(req.params.categoryId);
    if (isNaN(categoryId)) {
      return res.status(400).json({ message: "Invalid category ID" });
    }
    const services2 = await storage.getServicesByCategory(categoryId);
    res.json(services2);
  });
  app2.get("/api/services/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid service ID" });
    }
    const service = await storage.getServiceById(id);
    if (!service) {
      return res.status(404).json({ message: "Service not found" });
    }
    res.json(service);
  });
  app2.get("/api/payment-methods", async (req, res) => {
    const paymentMethods2 = await storage.getPaymentMethods();
    res.json(paymentMethods2);
  });
  app2.get("/api/testimonials", async (req, res) => {
    const testimonials2 = await storage.getTestimonials();
    res.json(testimonials2);
  });
  app2.get("/api/contact-info", async (req, res) => {
    const contactInfo2 = await storage.getContactInfo();
    if (!contactInfo2) {
      return res.status(404).json({ message: "Contact information not found" });
    }
    res.json(contactInfo2);
  });
  app2.get("/api/orders", async (req, res) => {
    const orders2 = await storage.getOrders();
    res.json(orders2);
  });
  app2.get("/api/orders/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const order = await storage.getOrderById(id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  });
  app2.post("/api/orders", async (req, res) => {
    try {
      const validatedData = insertOrderSchema.parse(req.body);
      const order = await storage.createOrder(validatedData);
      res.status(201).json(order);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid order data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create order" });
    }
  });
  const adminAuthMiddleware = async (req, res, next) => {
    next();
  };
  app2.post("/api/admin/categories", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertCategorySchema.parse(req.body);
      const category = await storage.createCategory(validatedData);
      res.status(201).json(category);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid category data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create category" });
    }
  });
  app2.put("/api/admin/categories/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid category ID" });
    }
    try {
      const validatedData = insertCategorySchema.partial().parse(req.body);
      const category = await storage.updateCategory(id, validatedData);
      if (!category) {
        return res.status(404).json({ message: "Category not found" });
      }
      res.json(category);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid category data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update category" });
    }
  });
  app2.delete("/api/admin/categories/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid category ID" });
    }
    const deleted = await storage.deleteCategory(id);
    if (!deleted) {
      return res.status(404).json({ message: "Category not found" });
    }
    res.status(204).send();
  });
  app2.post("/api/admin/services", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertServiceSchema.parse(req.body);
      const service = await storage.createService(validatedData);
      res.status(201).json(service);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid service data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create service" });
    }
  });
  app2.put("/api/admin/services/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid service ID" });
    }
    try {
      const validatedData = insertServiceSchema.partial().parse(req.body);
      const service = await storage.updateService(id, validatedData);
      if (!service) {
        return res.status(404).json({ message: "Service not found" });
      }
      res.json(service);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid service data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update service" });
    }
  });
  app2.delete("/api/admin/services/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid service ID" });
    }
    const deleted = await storage.deleteService(id);
    if (!deleted) {
      return res.status(404).json({ message: "Service not found" });
    }
    res.status(204).send();
  });
  app2.post("/api/admin/payment-methods", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertPaymentMethodSchema.parse(req.body);
      const method = await storage.createPaymentMethod(validatedData);
      res.status(201).json(method);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid payment method data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create payment method" });
    }
  });
  app2.put("/api/admin/payment-methods/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid payment method ID" });
    }
    try {
      const validatedData = insertPaymentMethodSchema.partial().parse(req.body);
      const method = await storage.updatePaymentMethod(id, validatedData);
      if (!method) {
        return res.status(404).json({ message: "Payment method not found" });
      }
      res.json(method);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid payment method data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update payment method" });
    }
  });
  app2.delete("/api/admin/payment-methods/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid payment method ID" });
    }
    const deleted = await storage.deletePaymentMethod(id);
    if (!deleted) {
      return res.status(404).json({ message: "Payment method not found" });
    }
    res.status(204).send();
  });
  app2.post("/api/admin/testimonials", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertTestimonialSchema.parse(req.body);
      const testimonial = await storage.createTestimonial(validatedData);
      res.status(201).json(testimonial);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid testimonial data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create testimonial" });
    }
  });
  app2.put("/api/admin/testimonials/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid testimonial ID" });
    }
    try {
      const validatedData = insertTestimonialSchema.partial().parse(req.body);
      const testimonial = await storage.updateTestimonial(id, validatedData);
      if (!testimonial) {
        return res.status(404).json({ message: "Testimonial not found" });
      }
      res.json(testimonial);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid testimonial data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update testimonial" });
    }
  });
  app2.delete("/api/admin/testimonials/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid testimonial ID" });
    }
    const deleted = await storage.deleteTestimonial(id);
    if (!deleted) {
      return res.status(404).json({ message: "Testimonial not found" });
    }
    res.status(204).send();
  });
  app2.put("/api/admin/contact-info/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid contact info ID" });
    }
    try {
      const validatedData = insertContactInfoSchema.partial().parse(req.body);
      const contactInfo2 = await storage.updateContactInfo(id, validatedData);
      if (!contactInfo2) {
        return res.status(404).json({ message: "Contact information not found" });
      }
      res.json(contactInfo2);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid contact information data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update contact information" });
    }
  });
  app2.get("/api/admin/orders", adminAuthMiddleware, async (req, res) => {
    const orders2 = await storage.getOrders();
    res.json(orders2);
  });
  app2.get("/api/admin/orders/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const order = await storage.getOrderById(id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  });
  app2.put("/api/admin/orders/:id/status", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const { status } = req.body;
    if (!status || !["pending", "approved", "rejected"].includes(status)) {
      return res.status(400).json({ message: "Invalid status value" });
    }
    const order = await storage.updateOrderStatus(id, status);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json({ limit: "50mb" }));
app.use(express2.urlencoded({ extended: false, limit: "50mb" }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();