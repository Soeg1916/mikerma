var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  categories: () => categories,
  contactInfo: () => contactInfo,
  insertCategorySchema: () => insertCategorySchema,
  insertContactInfoSchema: () => insertContactInfoSchema,
  insertOrderSchema: () => insertOrderSchema,
  insertPaymentMethodSchema: () => insertPaymentMethodSchema,
  insertServiceSchema: () => insertServiceSchema,
  insertTestimonialSchema: () => insertTestimonialSchema,
  insertUserSchema: () => insertUserSchema,
  orders: () => orders,
  paymentMethods: () => paymentMethods,
  services: () => services,
  testimonials: () => testimonials,
  users: () => users
});
import { pgTable, text, serial, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var categories = pgTable("categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  icon: text("icon").notNull(),
  description: text("description")
});
var insertCategorySchema = createInsertSchema(categories).pick({
  name: true,
  slug: true,
  icon: true,
  description: true
});
var services = pgTable("services", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  price: integer("price").notNull(),
  // Price in ETB
  image: text("image"),
  categoryId: integer("category_id").notNull(),
  featured: boolean("featured").default(false),
  paymentInstructions: text("payment_instructions")
});
var insertServiceSchema = createInsertSchema(services).pick({
  name: true,
  description: true,
  price: true,
  image: true,
  categoryId: true,
  featured: true,
  paymentInstructions: true
});
var paymentMethods = pgTable("payment_methods", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  icon: text("icon").notNull(),
  description: text("description"),
  instructions: text("instructions")
});
var insertPaymentMethodSchema = createInsertSchema(paymentMethods).pick({
  name: true,
  icon: true,
  description: true,
  instructions: true
});
var orders = pgTable("orders", {
  id: serial("id").primaryKey(),
  serviceId: integer("service_id").notNull(),
  serviceName: text("service_name").notNull(),
  paymentMethodId: integer("payment_method_id").notNull(),
  paymentMethod: text("payment_method").notNull(),
  amount: integer("amount").notNull(),
  status: text("status").notNull().default("pending"),
  screenshotUrl: text("screenshot_url").notNull(),
  customerPhone: text("customer_phone").notNull(),
  customerTelegram: text("customer_telegram"),
  platformUsername: text("platform_username"),
  targetUrl: text("target_url"),
  createdAt: timestamp("created_at").defaultNow().notNull()
});
var insertOrderSchema = createInsertSchema(orders).pick({
  serviceId: true,
  serviceName: true,
  paymentMethodId: true,
  paymentMethod: true,
  amount: true,
  status: true,
  screenshotUrl: true,
  customerPhone: true,
  customerTelegram: true,
  platformUsername: true,
  targetUrl: true
});
var testimonials = pgTable("testimonials", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  image: text("image"),
  rating: integer("rating").notNull(),
  comment: text("comment").notNull()
});
var insertTestimonialSchema = createInsertSchema(testimonials).pick({
  name: true,
  image: true,
  rating: true,
  comment: true
});
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  isAdmin: boolean("is_admin").default(false)
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
  isAdmin: true
});
var contactInfo = pgTable("contact_info", {
  id: serial("id").primaryKey(),
  address: text("address").notNull(),
  phone: text("phone").notNull(),
  telegramLink: text("telegram_link").notNull(),
  telegramUsername: text("telegram_username").notNull(),
  facebookLink: text("facebook_link").default("").notNull(),
  instagramLink: text("instagram_link").default("").notNull(),
  twitterLink: text("twitter_link").default("").notNull(),
  showSocialIcons: boolean("show_social_icons").default(false).notNull(),
  // Business hours fields
  weekdayHours: text("weekday_hours").default("Monday - Saturday: 9:00 AM - 8:00 PM").notNull(),
  weekendHours: text("weekend_hours").default("Sunday: 10:00 AM - 6:00 PM").notNull(),
  timeZone: text("time_zone").default("East Africa Time (EAT)").notNull()
});
var insertContactInfoSchema = createInsertSchema(contactInfo).pick({
  address: true,
  phone: true,
  telegramLink: true,
  telegramUsername: true,
  facebookLink: true,
  instagramLink: true,
  twitterLink: true,
  showSocialIcons: true,
  weekdayHours: true,
  weekendHours: true,
  timeZone: true
});

// server/db.ts
import { Pool, neonConfig } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-serverless";
import ws from "ws";
neonConfig.webSocketConstructor = ws;
if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?"
  );
}
var pool = new Pool({ connectionString: process.env.DATABASE_URL });
var db = drizzle({ client: pool, schema: schema_exports });

// server/database-storage.ts
import { eq } from "drizzle-orm";
var DatabaseStorage = class {
  // User methods
  async getUser(id) {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user || void 0;
  }
  async getUserByUsername(username) {
    const [user] = await db.select().from(users).where(eq(users.username, username));
    return user || void 0;
  }
  async createUser(insertUser) {
    const [user] = await db.insert(users).values(insertUser).returning();
    return user;
  }
  // Category methods
  async getCategories() {
    return db.select().from(categories);
  }
  async getCategoryBySlug(slug) {
    const [category] = await db.select().from(categories).where(eq(categories.slug, slug));
    return category || void 0;
  }
  async getCategoryById(id) {
    const [category] = await db.select().from(categories).where(eq(categories.id, id));
    return category || void 0;
  }
  async createCategory(category) {
    const [newCategory] = await db.insert(categories).values(category).returning();
    return newCategory;
  }
  async updateCategory(id, category) {
    const [updatedCategory] = await db.update(categories).set(category).where(eq(categories.id, id)).returning();
    return updatedCategory || void 0;
  }
  async deleteCategory(id) {
    const result = await db.delete(categories).where(eq(categories.id, id));
    return !!result;
  }
  // Service methods
  async getServices() {
    return db.select().from(services);
  }
  async getServicesByCategory(categoryId) {
    return db.select().from(services).where(eq(services.categoryId, categoryId));
  }
  async getServiceById(id) {
    const [service] = await db.select().from(services).where(eq(services.id, id));
    return service || void 0;
  }
  async getFeaturedServices() {
    return db.select().from(services).where(eq(services.featured, true));
  }
  async createService(service) {
    const [newService] = await db.insert(services).values(service).returning();
    return newService;
  }
  async updateService(id, serviceUpdate) {
    const [updatedService] = await db.update(services).set(serviceUpdate).where(eq(services.id, id)).returning();
    return updatedService || void 0;
  }
  async deleteService(id) {
    const result = await db.delete(services).where(eq(services.id, id));
    return !!result;
  }
  // Payment methods
  async getPaymentMethods() {
    return db.select().from(paymentMethods);
  }
  async getPaymentMethodById(id) {
    const [method] = await db.select().from(paymentMethods).where(eq(paymentMethods.id, id));
    return method || void 0;
  }
  async createPaymentMethod(method) {
    const [newMethod] = await db.insert(paymentMethods).values(method).returning();
    return newMethod;
  }
  async updatePaymentMethod(id, methodUpdate) {
    const [updatedMethod] = await db.update(paymentMethods).set(methodUpdate).where(eq(paymentMethods.id, id)).returning();
    return updatedMethod || void 0;
  }
  async deletePaymentMethod(id) {
    const result = await db.delete(paymentMethods).where(eq(paymentMethods.id, id));
    return !!result;
  }
  // Order methods
  async getOrders() {
    return db.select().from(orders);
  }
  async getOrderById(id) {
    const [order] = await db.select().from(orders).where(eq(orders.id, id));
    return order || void 0;
  }
  async createOrder(order) {
    const [newOrder] = await db.insert(orders).values(order).returning();
    return newOrder;
  }
  async updateOrderStatus(id, status) {
    const [updatedOrder] = await db.update(orders).set({ status }).where(eq(orders.id, id)).returning();
    return updatedOrder || void 0;
  }
  // Testimonials
  async getTestimonials() {
    return db.select().from(testimonials);
  }
  async getTestimonialById(id) {
    const [testimonial] = await db.select().from(testimonials).where(eq(testimonials.id, id));
    return testimonial || void 0;
  }
  async createTestimonial(testimonial) {
    const [newTestimonial] = await db.insert(testimonials).values(testimonial).returning();
    return newTestimonial;
  }
  async updateTestimonial(id, testimonialUpdate) {
    const [updatedTestimonial] = await db.update(testimonials).set(testimonialUpdate).where(eq(testimonials.id, id)).returning();
    return updatedTestimonial || void 0;
  }
  async deleteTestimonial(id) {
    const result = await db.delete(testimonials).where(eq(testimonials.id, id));
    return !!result;
  }
  // Contact Information methods
  async getContactInfo() {
    const [contact] = await db.select().from(contactInfo);
    return contact || void 0;
  }
  async createContactInfo(info) {
    const [newContactInfo] = await db.insert(contactInfo).values(info).returning();
    return newContactInfo;
  }
  async updateContactInfo(id, infoUpdate) {
    const [updatedContactInfo] = await db.update(contactInfo).set(infoUpdate).where(eq(contactInfo.id, id)).returning();
    return updatedContactInfo || void 0;
  }
};

// server/routes.ts
import { z } from "zod";
var storage = new DatabaseStorage();
async function registerRoutes(app2) {
  app2.get("/api/categories", async (req, res) => {
    const categories2 = await storage.getCategories();
    res.json(categories2);
  });
  app2.get("/api/categories/:slug", async (req, res) => {
    const { slug } = req.params;
    const category = await storage.getCategoryBySlug(slug);
    if (!category) {
      return res.status(404).json({ message: "Category not found" });
    }
    res.json(category);
  });
  app2.get("/api/services", async (req, res) => {
    const services2 = await storage.getServices();
    res.json(services2);
  });
  app2.get("/api/services/featured", async (req, res) => {
    const services2 = await storage.getFeaturedServices();
    res.json(services2);
  });
  app2.get("/api/services/category/:categoryId", async (req, res) => {
    const categoryId = parseInt(req.params.categoryId);
    if (isNaN(categoryId)) {
      return res.status(400).json({ message: "Invalid category ID" });
    }
    const services2 = await storage.getServicesByCategory(categoryId);
    res.json(services2);
  });
  app2.get("/api/services/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid service ID" });
    }
    const service = await storage.getServiceById(id);
    if (!service) {
      return res.status(404).json({ message: "Service not found" });
    }
    res.json(service);
  });
  app2.get("/api/payment-methods", async (req, res) => {
    const paymentMethods2 = await storage.getPaymentMethods();
    res.json(paymentMethods2);
  });
  app2.get("/api/testimonials", async (req, res) => {
    const testimonials2 = await storage.getTestimonials();
    res.json(testimonials2);
  });
  app2.get("/api/contact-info", async (req, res) => {
    const contactInfo2 = await storage.getContactInfo();
    if (!contactInfo2) {
      return res.status(404).json({ message: "Contact information not found" });
    }
    res.json(contactInfo2);
  });
  app2.get("/api/orders", async (req, res) => {
    const orders2 = await storage.getOrders();
    res.json(orders2);
  });
  app2.get("/api/orders/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const order = await storage.getOrderById(id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  });
  app2.post("/api/orders", async (req, res) => {
    try {
      const validatedData = insertOrderSchema.parse(req.body);
      const order = await storage.createOrder(validatedData);
      res.status(201).json(order);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid order data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create order" });
    }
  });
  const adminAuthMiddleware = async (req, res, next) => {
    next();
  };
  app2.post("/api/admin/categories", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertCategorySchema.parse(req.body);
      const category = await storage.createCategory(validatedData);
      res.status(201).json(category);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid category data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create category" });
    }
  });
  app2.put("/api/admin/categories/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid category ID" });
    }
    try {
      const validatedData = insertCategorySchema.partial().parse(req.body);
      const category = await storage.updateCategory(id, validatedData);
      if (!category) {
        return res.status(404).json({ message: "Category not found" });
      }
      res.json(category);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid category data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update category" });
    }
  });
  app2.delete("/api/admin/categories/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid category ID" });
    }
    const deleted = await storage.deleteCategory(id);
    if (!deleted) {
      return res.status(404).json({ message: "Category not found" });
    }
    res.status(204).send();
  });
  app2.post("/api/admin/services", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertServiceSchema.parse(req.body);
      const service = await storage.createService(validatedData);
      res.status(201).json(service);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid service data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create service" });
    }
  });
  app2.put("/api/admin/services/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid service ID" });
    }
    try {
      const validatedData = insertServiceSchema.partial().parse(req.body);
      const service = await storage.updateService(id, validatedData);
      if (!service) {
        return res.status(404).json({ message: "Service not found" });
      }
      res.json(service);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid service data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update service" });
    }
  });
  app2.delete("/api/admin/services/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid service ID" });
    }
    const deleted = await storage.deleteService(id);
    if (!deleted) {
      return res.status(404).json({ message: "Service not found" });
    }
    res.status(204).send();
  });
  app2.post("/api/admin/payment-methods", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertPaymentMethodSchema.parse(req.body);
      const method = await storage.createPaymentMethod(validatedData);
      res.status(201).json(method);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid payment method data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create payment method" });
    }
  });
  app2.put("/api/admin/payment-methods/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid payment method ID" });
    }
    try {
      const validatedData = insertPaymentMethodSchema.partial().parse(req.body);
      const method = await storage.updatePaymentMethod(id, validatedData);
      if (!method) {
        return res.status(404).json({ message: "Payment method not found" });
      }
      res.json(method);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid payment method data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update payment method" });
    }
  });
  app2.delete("/api/admin/payment-methods/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid payment method ID" });
    }
    const deleted = await storage.deletePaymentMethod(id);
    if (!deleted) {
      return res.status(404).json({ message: "Payment method not found" });
    }
    res.status(204).send();
  });
  app2.post("/api/admin/testimonials", adminAuthMiddleware, async (req, res) => {
    try {
      const validatedData = insertTestimonialSchema.parse(req.body);
      const testimonial = await storage.createTestimonial(validatedData);
      res.status(201).json(testimonial);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid testimonial data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create testimonial" });
    }
  });
  app2.put("/api/admin/testimonials/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid testimonial ID" });
    }
    try {
      const validatedData = insertTestimonialSchema.partial().parse(req.body);
      const testimonial = await storage.updateTestimonial(id, validatedData);
      if (!testimonial) {
        return res.status(404).json({ message: "Testimonial not found" });
      }
      res.json(testimonial);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid testimonial data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update testimonial" });
    }
  });
  app2.delete("/api/admin/testimonials/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid testimonial ID" });
    }
    const deleted = await storage.deleteTestimonial(id);
    if (!deleted) {
      return res.status(404).json({ message: "Testimonial not found" });
    }
    res.status(204).send();
  });
  app2.put("/api/admin/contact-info/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid contact info ID" });
    }
    try {
      const validatedData = insertContactInfoSchema.partial().parse(req.body);
      const contactInfo2 = await storage.updateContactInfo(id, validatedData);
      if (!contactInfo2) {
        return res.status(404).json({ message: "Contact information not found" });
      }
      res.json(contactInfo2);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid contact information data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update contact information" });
    }
  });
  app2.get("/api/admin/orders", adminAuthMiddleware, async (req, res) => {
    const orders2 = await storage.getOrders();
    res.json(orders2);
  });
  app2.get("/api/admin/orders/:id", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const order = await storage.getOrderById(id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  });
  app2.put("/api/admin/orders/:id/status", adminAuthMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ message: "Invalid order ID" });
    }
    const { status } = req.body;
    if (!status || !["pending", "approved", "rejected"].includes(status)) {
      return res.status(400).json({ message: "Invalid status value" });
    }
    const order = await storage.updateOrderStatus(id, status);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.json(order);
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json({ limit: "50mb" }));
app.use(express2.urlencoded({ extended: false, limit: "50mb" }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();